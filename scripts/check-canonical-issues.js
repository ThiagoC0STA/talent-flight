const fs = require("fs");
const path = require("path");

function checkCanonicalIssues() {
  console.log("üîç Verificando problemas de can√¥nicas...\n");

  // Verificar se a URL espec√≠fica est√° no sitemap
  const sitemapPath = path.join(__dirname, "../public/sitemap.xml");

  if (!fs.existsSync(sitemapPath)) {
    console.log("‚ùå Sitemap n√£o encontrado");
    return;
  }

  const sitemapContent = fs.readFileSync(sitemapPath, "utf8");
  const urlMatches = sitemapContent.match(/<loc>(.*?)<\/loc>/g);

  if (!urlMatches) {
    console.log("‚ùå Nenhuma URL encontrada no sitemap");
    return;
  }

  const urls = urlMatches.map((match) =>
    match.replace("<loc>", "").replace("</loc>", "")
  );

  // Verificar URL espec√≠fica
  const specificUrl =
    "https://talentflight.com/job/software-engineer-front-end-react-js-at-eshipjet-ai";
  const foundSpecificUrl = urls.find((url) => url === specificUrl);

  if (foundSpecificUrl) {
    console.log(`‚úÖ URL espec√≠fica encontrada no sitemap: ${specificUrl}`);
  } else {
    console.log(`‚ùå URL espec√≠fica N√ÉO encontrada no sitemap: ${specificUrl}`);
  }

  // Verificar duplicatas
  const duplicates = urls.filter((url, index) => urls.indexOf(url) !== index);

  if (duplicates.length > 0) {
    console.log(`‚ùå URLs duplicadas encontradas: ${duplicates.length}`);
    duplicates.forEach((url) => console.log(`  - ${url}`));
  } else {
    console.log("‚úÖ Nenhuma URL duplicada encontrada");
  }

  // Verificar URLs problem√°ticas reais
  const problematicUrls = urls.filter((url) => {
    return (
      url.includes("undefined") ||
      url.includes("null") ||
      url.includes("//") ||
      !url.startsWith("https://talentflight.com")
    );
  });

  if (problematicUrls.length > 0) {
    console.log(`‚ùå URLs com problemas encontradas: ${problematicUrls.length}`);
    problematicUrls.forEach((url) => console.log(`  - ${url}`));
  } else {
    console.log("‚úÖ Nenhuma URL com problemas encontrada");
  }

  console.log(`\nüìä Resumo:`);
  console.log(`  - Total de URLs no sitemap: ${urls.length}`);
  console.log(`  - URLs √∫nicas: ${new Set(urls).size}`);
  console.log(`  - Duplicatas: ${duplicates.length}`);
  console.log(`  - URLs problem√°ticas: ${problematicUrls.length}`);

  // An√°lise do problema de can√¥nicas
  console.log(
    `\nüîç An√°lise do problema "P√°gina alternativa com tag can√¥nica adequada":`
  );
  console.log(
    `  - Este erro indica que o Google encontrou m√∫ltiplas URLs para o mesmo conte√∫do`
  );
  console.log(
    `  - O Google est√° usando a tag can√¥nica para determinar qual indexar`
  );
  console.log(`  - Poss√≠veis causas:`);
  console.log(`    1. URLs duplicadas no sitemap`);
  console.log(`    2. Redirecionamentos incorretos`);
  console.log(`    3. Configura√ß√£o incorreta de can√¥nicas`);
  console.log(`    4. URLs com par√¢metros desnecess√°rios`);

  if (duplicates.length === 0 && problematicUrls.length === 0) {
    console.log(
      `\n‚úÖ O sitemap parece estar correto. O problema pode estar em:`
    );
    console.log(`  - Configura√ß√£o de can√¥nicas nas p√°ginas`);
    console.log(`  - Redirecionamentos no servidor`);
    console.log(`  - URLs com par√¢metros de query string`);
  }
}

checkCanonicalIssues();
